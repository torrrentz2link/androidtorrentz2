"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
describe("gatsby-plugin-verify-bing: gatsby-node", () => {
    describe("generates a valid XML file", () => {
        const mockedWriteFile = jest.fn((name, contents, callback) => {
            callback();
        });
        beforeEach(() => {
            jest.mock("fs", () => ({
                writeFile: mockedWriteFile
            }));
        });
        afterEach(() => {
            mockedWriteFile.mockClear();
        });
        it("given all options", () => __awaiter(void 0, void 0, void 0, function* () {
            const { onPostBuild } = yield Promise.resolve().then(() => __importStar(require("../gatsby-node")));
            yield onPostBuild({}, { userIds: ["testTESTtest"], xmlFileName: "BingSiteAuth.xml" });
            expect(mockedWriteFile).toHaveBeenCalledTimes(1);
            expect(mockedWriteFile.mock.calls[0][0]).toBe("public/BingSiteAuth.xml");
            expect(mockedWriteFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      <?xml version="1.0"?>
      <users>
          <user>
              testTESTtest
          </user>
      </users>
    `);
        }));
        it("given only required options", () => __awaiter(void 0, void 0, void 0, function* () {
            const { onPostBuild } = yield Promise.resolve().then(() => __importStar(require("../gatsby-node")));
            yield onPostBuild({}, { userIds: ["testTESTtest"] });
            expect(mockedWriteFile).toHaveBeenCalledTimes(1);
            expect(mockedWriteFile.mock.calls[0][0]).toBe("public/BingSiteAuth.xml");
            expect(mockedWriteFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      <?xml version="1.0"?>
      <users>
          <user>
              testTESTtest
          </user>
      </users>
    `);
        }));
    });
});
//# sourceMappingURL=gatsby-node.js.map