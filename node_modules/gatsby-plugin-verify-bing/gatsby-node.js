"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const xmlbuilder_1 = __importDefault(require("xmlbuilder"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const util_1 = require("util");
const publicPath = "./public";
const defaultXmlFileName = "BingSiteAuth.xml";
exports.onPostBuild = (_, pluginOptions) => __awaiter(void 0, void 0, void 0, function* () {
    if (pluginOptions && pluginOptions.userIds) {
        const xml = xmlbuilder_1.default
            .create({
            users: pluginOptions.userIds.map(userId => ({
                user: {
                    "#text": userId
                }
            }))
        })
            .end();
        const outputPath = path.join(publicPath, pluginOptions.xmlFileName || defaultXmlFileName);
        yield util_1.promisify(fs.writeFile)(outputPath, xml);
    }
});
//# sourceMappingURL=gatsby-node.js.map